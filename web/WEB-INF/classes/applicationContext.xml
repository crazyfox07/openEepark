<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oxm="http://www.springframework.org/schema/oxm"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/oxm
	                    http://www.springframework.org/schema/oxm/spring-oxm.xsd
	                    http://www.springframework.org/schema/tx
        				http://www.springframework.org/schema/tx/spring-tx.xsd
        				http://www.springframework.org/schema/aop
        				http://www.springframework.org/schema/aop/spring-aop.xsd
        				http://www.springframework.org/schema/context
        			    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 1、包扫描业务，@Service ,去掉@Controller -->
    <context:component-scan base-package="com.bitcom.openepark">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <context:property-placeholder location="classpath:*.properties" />

    <!-- 上传文件用 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8" />
        <property name="maxUploadSize" value="10485760000" />
        <property name="maxInMemorySize" value="40960" />
    </bean>

    <!-- druid 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="defaultAutoCommit" value="false" />
        <property name="initialSize" value="${jdbc.pool.initialSize}" />
        <property name="maxActive" value="${jdbc.pool.maxActive}" />
        <property name="minIdle" value="${jdbc.pool.minIdle}" />
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <property name="filters" value="stat" />
        <property name="useGlobalDataSourceStat" value="true" />
    </bean>

    <bean id="mysqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-Configuration.xml" />
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="mysqlSessionFactory"></constructor-arg>
    </bean>

    <bean name="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="create*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="add*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="execute*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="*" propagation="REQUIRED" read-only="true"
                       rollback-for="java.lang.Exception" />

        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="transactionPointCut"
                      expression="execution(* com.bitcom.openepark.*.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointCut" />
    </aop:config>


    <!-- 扫描 basePackage下所有的接口，根据对应的mapper.xml为其生成代理类 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.bitcom.openepark.base.persistence" />
    </bean>


    <!-- By default, the JedisConnectionFactory pools connections -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:use-pool="true">
        <property name="hostName" value="${redis.ip}"></property>
        <property name="port" value="${redis.port}"></property>
        <property name="password" value="${redis.password}"></property>
    </bean>

    <!-- redis template definition -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnectionFactory">
        <property name="keySerializer" ref="Stringserializer"></property>
        <property name="valueSerializer" ref="Stringserializer"></property>
    </bean>

    <!-- key keySerializer -->
    <bean id="Stringserializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>

    <!-- Queue Configuration-->
    <bean id="redisQueue" class="com.bitcom.openepark.queue.RedisQueue">
        <constructor-arg name="queueName" value="upperTaskQueue"/>
        <constructor-arg><ref bean="redisTemplate"/></constructor-arg>
    </bean>

    <!-- Queue Execute Thread -->
    <bean id="eventThread" class="com.bitcom.openepark.queue.EventQueueThread"  init-method="init" destroy-method="close">
        <property name="queue" ref="redisQueue"></property>
    </bean>

    <import resource="classpath:applicationContext-jobs.xml"/>


</beans>
